"""

Euler discovered the remarkable quadratic formula:

n2+n+41
It turns out that the formula will produce 40 primes for the consecutive integer values 0≤n≤39.
However, when n=40,402+40+41=40(40+1)+41 is divisible by 41,
and certainly when n=41,412+41+41 is clearly divisible by 41.

The incredible formula n2−79n+1601 was discovered, which produces 80 primes for the consecutive values 0≤n≤79.
The product of the coefficients, −79 and 1601, is −126479.

Considering quadratics of the form:

n2+an+b, where |a|<1000 and |b|≤1000

where |n| is the modulus/absolute value of n
e.g. |11|=11 and |−4|=4
Find the product of the coefficients, a and b,
for the quadratic expression that produces the maximum number of primes for consecutive values of n, starting with n=0.

"""

from math import ceil, sqrt


def prime_check(n):  # Function that checks if n is prime or not.
    if abs(n) == 0 or abs(n) == 1:
        return 0
    elif abs(n) == 2:
        return 1
    else:
        for i in range(2, int(ceil(sqrt(abs(n))) + 1)):
            if n % i == 0:
                return 0
    return 1


def count_gen_primes(a, b):  # Returns the max no. of prime numbers generated by a & b, with the quadratic expression.
    count = 0
    n = 0
    while prime_check((n**2) + (a*n) + b) == 1:
        count += 1
        n += 1
    return count


def quad_primes(lmt):  # Function that returns the product of coefficients of the quadratic expression -
                        # that generates the most prime numbers, within the limit lmt.
    result, max_count = 1, 1
    for a in range(lmt-1):
        if prime_check(a) == 1:
            for b in range(lmt):
                if prime_check(b) == 1:
                    for [i, j] in [[1, 1], [1, -1], [-1, 1], [-1, -1]]:
                        if max_count < count_gen_primes(a*i, b*j):
                            result = a*b*i*j
                            max_count = count_gen_primes(a*i, b*j)
    return result


print(quad_primes(1000))
